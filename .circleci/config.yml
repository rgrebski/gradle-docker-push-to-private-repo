defaults: &workdirAndImage
  working_directory: ~/workspace
  docker:
    - image: circleci/openjdk:8-jdk

version: 2
jobs:
  checkout_code:
    <<: *workdirAndImage
    steps:
      - checkout:
          path: ~/workspace/repo
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - repo/

  build:
    <<: *workdirAndImage
    working_directory: ~/workspace/repo


    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - attach_workspace:
          at: ~/workspace
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run: gradle build -x test

      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: v2-dependencies-{{ checksum "build.gradle" }}


  test:
    <<: *workdirAndImage
    working_directory: ~/workspace/repo

    steps:
      - attach_workspace:
          at: ~/workspace
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
      - run: gradle test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit


  push_docker_image:
    <<: *workdirAndImage
    working_directory: ~/workspace/repo
    steps:
      - attach_workspace:
          at: ~/workspace
      - setup_remote_docker
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
      - run: gradle pushDockerWithGitVersion

workflows:
  version: 2
  deploy_to_dev:
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code
      - test:
          requires:
            - build
      - push_docker_image:
          requires:
            - test
          filters:
            branches:
              only: master
